---
version: '3'

tasks:
  environment:
    deps:
      - task: common:nodejs-dependencies
    desc: Prompts for which environment to use and then symlinks to it
    summary: |
      $ Switch environments using an interactive dialogue

      Ansible does not really provide any great ways to switch between environments (or sets of
      host_vars, group_vars etc.). If you place all the files and folders you wish to constitute
      as an environment inside a folder named as the name of the environment then you can use
      this task to handle the symlinking and switching between environments.

      You can directly switch enironments to `environments/prod/` by running:
      > task ansible:environment -- prod
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          for ITEM in environments/{{.CLI_ARGS}}/*; do
            if [ -d "$ITEM" ] || [ -f "$ITEM" ]; then
              echo "Skipping environments/{{.CLI_ARGS}}/$ITEM because it already exists as a file/folder in the root of the project."
            else
              rm -f $ITEM
              ln -s "./environments/{{.CLI_ARGS}}/$ITEM" "$ITEM"
            fi
          done
        else
          node .common/scripts/environment.js
        fi
    preconditions:
      - sh: 'test -d node_modules'
        msg: 'This task has dependencies in the `node_modules` folder which is missing. Install them by running `task common:nodejs-dependencies`.'
      - sh: 'type node &> /dev/null'
        msg: 'Node.js is required. Install it by running `task software:node`.'

  find-missing-files:
    desc: Find roles that are missing files
    summary: |
      $ Find roles that are missing any given file

      This task scans through all the folders in the roles/ directory and checks
      for the presence of a file that you pass in through the CLI.

      Example usage:
      > task find-missing-files -- logo.png

      The example above will look through all the folders two levels deep (e.g. ./roles/tools/nmap,
      ./roles/system/snapd)in the roles folder and display any roles that are missing the file.
    cmds:
      - find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/{{.CLI_ARGS}}" ';' -print
    preconditions:
      - sh: 'test -d roles'
        msg: 'The roles folder is missing. Is the project set up right?'

  symlink:
    desc: Symlink all the roles in the roles/ folder to ~/.ansible/roles
    summary: |
      $ Symlink each role to ~/.ansible/roles/{{.GALAXY_NAMESPACE}}.\role_name

      In the playbook, roles are sometimes referred to by their folder name and in other cases
      they are referred to with their namespace prepended (e.g. {{.GALAXY_NAMESPACE}}.role_name).
      This can cause issues so, in order for everything to work, each folder needs to be symlinked
      to ~/.ansible/roles with the namespace prepended.
    cmds:
      - |
        find ./roles -mindepth 2 -maxdepth 2 -type d -print0 | while read -d $'\0' ROLE_PATH; do;
          PATH_BASENAME=$(basename "$ROLE_PATH");
          if [ ! -d "~/.ansible/roles/$GALAXY_NAMESPACE.$PATH_BASENAME" ]; then
            ln -sf "$PWD/$ROLE_PATH" "~/.ansible/roles/{{.GALAXY_NAMESPACE}}.{{.PATH_BASENAME}}"
          fi
        done
    preconditions:
      - sh: 'test -d roles'
        msg: 'The roles folder is missing. Is the project set up right?'
