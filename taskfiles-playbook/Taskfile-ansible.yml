---
version: '3'

tasks:
  ansibler-compatibility-chart:
    deps:
      - :common:python-requirements
      - :software:jq
    env:
      TMP:
        sh: mktemp
    cmds:
      - ansibler --generate-compatibility-chart --molecule-results-dir molecule/.results --json-file .variables.json
      - |
        MATRIX_JSON=$(jq -r '.blueprint.compatibility_matrix' package.ansibler.json)
        jq --arg matrix "$MATRIX_JSON" '.compatibility_matrix = ($matrix | fromjson)' .variables.json > "$TMP"
        mv "$TMP" .variables.json
    sources:
      - molecule/.results/*.txt

  ansibler-role-dependencies:
    deps:
      - :common:python-requirements
    cmds:
      - ansibler --role-dependencies --json-file .variables.json
    sources:
      - requirements.yml

  ansibler-tasks:
    deps:
      - ansibler-role-dependencies
      - collection-dependencies

  ansibler:
    deps:
      - :common:python-requirements
    cmds:
      - task: ansibler-compatibility-chart
      - task: ansibler-tasks
    preconditions:
      - sh: 'type ansibler &> /dev/null'
        msg: '`ansibler` is not installed globally. Install all the requirements by running `task common:requirements`.'
    status:
      - true

  collection-dependencies:
    deps:
      - :software:jq
      - :software:yq
    env:
      COLLECTIONS:
        sh:
          jq --arg collections "$(yq eval -j '.collections' requirements.yml)" '.collection_dependencies = ($collections | fromjson)
          | "<b><a href=\"" + .collection_dependencies[].source + "/" + (.collection_dependencies[].name
          | split(".") | join("/")) + "\" title=\"" + .collection_dependencies[].name +
          " collection on Ansible Galaxy\" target=\"blank\">" + .collection_dependencies[].name
          + "</a></b>"' -r  .variables.json | jq --raw-input --slurp 'split("\n") | .[0:((. | length) - 1)]'
      TMP:
        sh: mktemp
    cmds:
      - jq --arg collections "$COLLECTIONS" '.collection_dependencies = ($collections | fromjson)' .variables.json > "$TMP"
      - mv "$TMP" .variables.json
    sources:
      - .variables.json
      - requirements.yml

  collection-dependencies-markdown:
    deps:
      - :software:jq
    vars:
      MULTIPLE_COLLECTIONS_TEXT: ### Galaxy Collections\n\nThis role is dependent on multiple Ansible Galaxy
        collections. The collections along with a links to their source are listed below.\n\n{{collection_dependencies}}
      SINGLE_COLLECTION_TEXT: ### Galaxy Collection\n\nThis role is dependent on the following Ansible Galaxy
        collection:\n\n
    env:
      COLLECTION_LENGTH:
        sh: jq -r '.collection_dependencies | length' .variables.json
    cmds:
      - mkdir -p .autodoc
      - |
        if [ "$COLLECTION_LENGTH" == '0' ]; then
          echo "" > .autodoc/collection_dependencies.md
        elif [ "$COLLECTION_LENGTH" == '1' ]; then
          echo "{{.SINGLE_COLLECTION_TEXT}}" > .autodoc/collection_dependencies.md
        else
          echo "{{.MULTIPLE_COLLECTIONS_TEXT}}" > .autodoc/collection_dependencies.md
        fi
    sources:
      - .autodoc/collection_dependencies.md
      - .variables.json

  environment-prompt:
    deps:
      - :common:nodejs-dependencies
    env:
      ENVIRONMENT:
        sh: node .common/scripts/prompts/environment.js
    cmds:
      - |
        if [ ! -z "$ENVIRONMENT" ]; then
          for ITEM in "environments/$ENVIRONMENT/*"; do
            if [ -d "$ITEM" ] || [ -f "$ITEM" ]; then
              true info "Skipping environments/$ENVIRONMENT/$ITEM because it already exists as a file/folder in the root of the project."
            else
              rm -f $ITEM
              ln -s "./environments/$ENVIRONMENT/$ITEM" "$ITEM"
            fi
          done
        fi
    preconditions:
      - sh: 'test -d node_modules'
        msg: 'This task has dependencies in the `node_modules` folder which is missing. Install them by running `task common:nodejs-dependencies`.'
    status:
      - '[[ -z "{{.CLI_ARGS}}" ]]'

  environment:
    desc: Prompts for which environment to use and then symlinks to it
    summary: |
      # Switch environments using an interactive dialogue

      Ansible does not really provide any great ways to switch between environments (or sets of
      `host_vars/`, `group_vars/` etc.). If you place all the files and folders you wish to constitute
      as an environment inside a folder named as the name of the environment then you can use
      this task to handle the symlinking and switching between environments.

      **Example of opening the interactive prompt:**
      `task ansible:environment`

      **You can directly switch enironments to `environments/prod/` by running:**
      `task ansible:environment -- prod`
    cmds:
      - |
        if [ ! -z "{{.CLI_ARGS}}" ]; then
          for ITEM in environments/{{.CLI_ARGS}}/*; do
            if [ -d "$ITEM" ] || [ -f "$ITEM" ]; then
              true info "Skipping environments/{{.CLI_ARGS}}/$ITEM because it already exists as a file/folder in the root of the project."
            else
              rm -f $ITEM
              ln -s "./environments/{{.CLI_ARGS}}/$ITEM" "$ITEM"
            fi
          done
        fi
      - task: environment-prompt

  find-missing-files:
    desc: Find roles that are missing files
    summary: |
      # Find roles that are missing any given file

      This task scans through all the folders in the roles/ directory and checks
      for the presence of a file that you pass in through the CLI.

      **Example usage:**
      `task find-missing-files -- logo.png`

      The example above will look through all the folders two levels deep (e.g. `./roles/tools/nmap`,
      `./roles/system/snapd`) in the roles folder and display any roles that are missing the file.
    cmds:
      - find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/{{.CLI_ARGS}}" ';' -print
    preconditions:
      - sh: 'test -d roles'
        msg: 'The roles folder is missing. Is the project set up right?'

  symlink:
    desc: Symlink all the roles in the roles/ folder to ~/.ansible/roles
    summary: |
      # Symlink each role to `~/.ansible/roles/{{.GALAXY_NAMESPACE}}.role_name`

      In the playbook, roles are sometimes referred to by their folder name and in other cases
      they are referred to with their namespace prepended (e.g. `{{.GALAXY_NAMESPACE}}.role_name`).
      This can cause issues so, in order for everything to work, each folder needs to be symlinked
      to `~/.ansible/roles` with the namespace prepended.
    cmds:
      - |
        find ./roles -mindepth 2 -maxdepth 2 -type d -print0 | while read -d $'\0' ROLE_PATH; do;
          PATH_BASENAME=$(basename "$ROLE_PATH");
          if [ ! -d "~/.ansible/roles/{{.GALAXY_NAMESPACE}}.$PATH_BASENAME" ]; then
            ln -sf "$PWD/$ROLE_PATH" "~/.ansible/roles/{{.GALAXY_NAMESPACE}}.$PATH_BASENAME"
          fi
        done
    preconditions:
      - sh: 'test -d roles'
        msg: 'The roles folder is missing. Is the project set up right?'
