---
version: '3'

tasks:
  install-doctor:
    cmds:
      - |
        if ! type {{.SOFTWARE}} &> /dev/null; then
          true info 'Using https://install.doctor to install `{{.SOFTWARE}}`'
          curl -sS https://install.doctor/{{.SOFTWARE}} | bash
        fi
    status:
      - '[[ "${container:=}" == "docker" ]] || type {{.SOFTWARE}} &> /dev/null'

  local:modules:
    deps:
      - npm:{{.NPM_PROGRAM}}
    cmds:
      - '{{.NPM_PROGRAM}} install'
      - '{{.NPM_PROGRAM}} audit fix{{if eq .NPM_PROGRAM "npm"}} --force{{end}} || true'
    sources:
      - package.json

  npm:commitizen:
    run: once
    cmds:
      - task: npm:global
        vars:
          FORCE_INSTALL: true
          NPM_PACKAGE: commitizen
          NPM_PACKAGE_BIN: git-cz

  npm:commitlint:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: '@commitlint/cli'
          NPM_PACKAGE_BIN: commitlint

  npm:cspell:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: cspell

  npm:eslint:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: eslint

  npm:eslint:dev-dependencies:
    deps:
      - software:node
    run: once
    cmds:
      - >
        {{.NPM_PROGRAM}} install --save-dev
          @typescript-eslint/eslint-plugin
          @typescript-eslint/eslint-plugin-tslint
          @typescript-eslint/parser
          eslint
          eslint-plugin-import
          eslint-plugin-jsdoc
          eslint-plugin-prefer-arrow
          eslint-plugin-promise
          eslint-plugin-regexp
          eslint-plugin-rxjs
          eslint-plugin-simple-import-sort
          eslint-plugin-sort-class-members
          eslint-plugin-sort-keys-fix
          eslint-plugin-tsdoc
          eslint-plugin-typescript-sort-keys
          eslint-plugin-unicorn
          eslint-plugin-unused-imports
          prettier-plugin-organize-imports
          typescript

  npm:global:
    deps:
      - npm:global:deps
    cmds:
      - |
        if [[ "${container:=}" != 'docker' ]]; then
          if [ '{{.FORCE_INSTALL}}' ]; then
            {{.NPM_PROGRAM}} install -g {{.NPM_PACKAGE}}@latest --force
          else
            {{.NPM_PROGRAM}} install -g {{.NPM_PACKAGE}}@latest
          fi
          true success 'The npm `{{.NPM_PACKAGE}}` package is globally installed'
        fi
    status:
      - type {{if .NPM_PACKAGE_BIN}}{{.NPM_PACKAGE_BIN}}{{else}}{{.NPM_PACKAGE}}{{end}} &> /dev/null

  npm:global:clean:
    vars:
      NPM_ROOT:
        sh: '{{.NPM_PROGRAM}} root -g'
    run: once
    cmds:
      - rm -rf "{{.NPM_ROOT}}/.*" 2> /dev/null | true
    status:
      - '! ls {{.NPM_ROOT}}/.*'

  npm:global:deps:
    deps:
      - software:node
    run: once
    cmds:
      - task: npm:global:clean

  npm:hbs:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: hbs-cli
          NPM_PACKAGE_BIN: hbs

  npm:husky:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: husky

  npm:lint-staged:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: lint-staged

  npm:markdown-link-check:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: markdown-link-check

  npm:npm:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: npm

  npm:pnpm:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: pnpm
      - pnpm import
    status:
      - type pnpm &> /dev/null

  npm:prettier:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: prettier

  npm:prettier-package-json:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: prettier-package-json

  npm:readme:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: '@appnest/readme'
          NPM_PACKAGE_BIN: readme

  npm:remark:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: remark-cli
          NPM_PACKAGE_BIN: remark

  npm:sharp:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: sharp-cli
          NPM_PACKAGE_BIN: sharp

  npm:shellcheck:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: shellcheck

  npm:snyk:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: snyk

  npm:standard:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: standard

  npm:standard-version:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: standard-version

  npm:tinypng:
    run: once
    cmds:
      - task: npm:global
        vars:
          NPM_PACKAGE: tinypng-cli
          NPM_PACKAGE_BIN: tinypng

  python:virtualenv:
    deps:
      - software:python
    run: once
    cmds:
      - pip3 install virtualenv
    status:
      - type virtualenv &> /dev/null

  software:docker:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: docker

  software:dockle:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: dockle

  software:exiftool:
    run: once
    cmds:
      - task: exiftool
        vars:
          SOFTWARE: exiftool

  software:gh:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: gh

  software:git:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: git

  software:gitleaks:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: gitleaks

  software:glab:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: glab

  software:jq:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: jq

  software:node:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: node
    status:
      - type node &> /dev/null
      - type {{.NPM_PROGRAM}} &> /dev/null
      - type {{.NPX_PACKAGE}} &> /dev/null

  software:python:
    run: once
    cmds:
      - task: software:python:{{OS}}
    status:
      - type python3 &> /dev/null

  software:python:darwin:
    cmds:
      - task: software:python:miniconda
        vars:
          BASH_PROFILE: .bash_profile
          MINICONDA_DOWNLOAD_CHECKSUM: b3bf77cbb81ee235ec6858146a2a84d20f8ecdeb614678030c39baacb5acbed1
          MINICONDA_DOWNLOAD_URL: https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh

  software:python:linux:
    cmds:
      - task: software:python:miniconda
        vars:
          BASH_PROFILE: .bashrc
          MINICONDA_DOWNLOAD_CHECKSUM: 536817d1b14cb1ada88900f5be51ce0a5e042bae178b5550e62f61e223deae7c
          MINICONDA_DOWNLOAD_URL: https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh

  software:python:miniconda: |
    if ! type python3 &> /dev/null; then
      true warn "Python 3 is missing from your computer"
      true info "Installing Python 3 rootlessly using Miniconda"
      curl -sS \{{.MINICONDA_DOWNLOAD_URL}} > miniconda.sh
      {{if eq OS "darwin"}}echo "{{.MINICONDA_DOWNLOAD_CHECKSUM}} miniconda.sh" | sha256sum --check{{end}}
      {{if eq OS "linux"}}echo "miniconda.sh  {{.MINICONDA_DOWNLOAD_CHECKSUM}}" | shasum -s -a 256 -c{{end}}
      mkdir -p "$HOME/.local"
      bash miniconda.sh -b -p "$HOME/.local/miniconda"
      rm miniconda.sh
      export PATH="$HOME/.local/miniconda/bin:$PATH"
      if grep -L '.local/miniconda/bin' "$HOME/{{.BASH_PROFILE}}"; then
        true info 'Updating the `{{.BASH_PROFILE}}` file to include Miniconda Python 3 in the `PATH` environment variable'
        echo -e '\nexport PATH=$HOME/.local/miniconda/bin:$PATH' >> "$HOME/{{.BASH_PROFILE}}"
      fi
    fi

  software:rsync:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: rsync

  software:trivy:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: trivy

  software:vagrant:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: vagrant

  software:virtualbox:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: virtualbox

  software:yq:
    run: once
    cmds:
      - task: install-doctor
        vars:
          SOFTWARE: yq
