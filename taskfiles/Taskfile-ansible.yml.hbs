---
version: '3'

tasks:
{{#if hbs.playbook}}

  find-missing-files:
    desc: Find roles that are missing files
    summary: |
      $ Find roles that are missing any given file

      This task scans through all the folders in the roles/ directory and checks
      for the presence of a file that you pass in through the CLI.

      Example usage:
      > task find-missing-files -- logo.png

      The example above will look through all the folders two levels deep (e.g. ./roles/tools/nmap,
      ./roles/system/snapd)in the roles folder and display any roles that are missing the file.
    cmds:
      - find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e "{}/\{{.CLI_ARGS}}" ';' -print
    preconditions:
      - sh: "test -d roles"
        msg: "The roles folder is missing. Is the project set up right?"

  symlink:
    desc: Symlink all the roles in the roles/ folder to ~/.ansible/roles
    summary: |
      $ Symlink each role to ~/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\role_name

      In the playbook, roles are sometimes referred to by their folder name and in other cases
      they are referred to with their namespace prepended (e.g. \{{.GALAXY_NAMESPACE}}.role_name).
      This can cause issues so, in order for everything to work, each folder needs to be symlinked
      to ~/.ansible/roles with the namespace prepended.
    cmds:
      - |
        find ./roles -mindepth 2 -maxdepth 2 -type d -print0 | while read -d $'\0' ROLE_PATH; do;
          PATH_BASENAME=$(basename "$ROLE_PATH");
          if [ ! -d "~/.ansible/roles/$GALAXY_NAMESPACE.$PATH_BASENAME" ]; then
            ln -sf "$PWD/$ROLE_PATH" "~/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\{{.PATH_BASENAME}}"
          fi
        done
    sources:
      - roles/*/*/
    method: timestamp
    preconditions:
      - sh: "test -d roles"
        msg: "The roles folder is missing. Is the project set up right?"
{{/if}}
{{#if hbs.role}}

  populate-dependencies:
    desc: Attempt to automatically populate meta/main.yml and requirements.yml
    summary: |
      $ Automatically populate meta/main.yml and requirements.yml

      A role can sometimes have dependencies that need to be installed prior to being run (e.g. most
      roles in Ansible >2.9 need the `community.general` collection installed). Roles also sometimes
      need other roles to run before they are run (e.g. a task that installs a Node.js package needs
      the Node.js installer to run first). This task will scan for common dependencies by doing a text
      search for a handful of common strings. It will then attempt to automatically populate
      `meta/main.yml` and the `requirements.yml`.

      Comma-seperated text items it attempts to auto-populate for:
      chocolatey.chocolatey, community.general, community.general.homebrew, community.general.npm,
      community.general.gem, community.general.snap
    vars:
      COLLECTIONS:
        sh: yq eval '.collections' requirements.yml
      DEPENDENCIES:
        sh: yq eval '.dependencies' meta/main.yml
      IS_SNAP:
        sh: grep -Ril "role_name: snapd" meta/main.yml
    cmds:
      - task: _populate-collection
        vars:
          COLLECTION: chocolatey.chocolatey
      - task: _populate-collection
        vars:
          COLLECTION: community.general
      - task: _populate-meta
        vars:
          MODULE: community.general.homebrew
          ROLE: \{{.GALAXY_NAMESPACE}}.homebrew
          VAL: {"role": "\{{.GALAXY_NAMESPACE}}.homebrew", "when": "ansible_os_family == \"Darwin\""}
      - task: _populate-meta
        vars:
          MODULE: community.general.npm
          ROLE: \{{.GALAXY_NAMESPACE}}.nodejs
          VAL: {"role": "\{{.GALAXY_NAMESPACE}}.nodejs"}
      - task: _populate-meta
        vars:
          MODULE: community.general.gem
          ROLE: \{{.GALAXY_NAMESPACE}}.ruby
          VAL: {"role": "\{{.GALAXY_NAMESPACE}}.ruby"}
      - task: _populate-meta
        vars:
          MODULE: community.general.snap
          ROLE: \{{.GALAXY_NAMESPACE}}.snapd
          VAL: {"role": "\{{.GALAXY_NAMESPACE}}.snapd", "when": "ansible_system == \"Linux\""}

    preconditions:
      - sh: "type yq &> /dev/null"
        msg: "yq is not installed! yq is required for interacting with YML files. Install it by running `bash .start.sh`."

  _populate-collection:
    vars:
      REFERENCES:
        sh: grep -Ril "\{{.COLLECTION}}" ./tasks
    cmds:
      - |
        if [ "\{{.REFERENCES}}" ] && [[ ! "\{{.COLLECTIONS}}" =~ "\{{.COLLECTION}}" ]] && [ ! ("\{{.IS_SNAP}}" && "\{{.ROLE}}" == "\{{.GALAXY_NAMESPACE}}.snapd") ]; then
            yq eval -i -P '.collections = .collections + \{{.VAL}}' requirements.yml
            TMP=$(mktemp)
            (echo "---" && cat requirements.yml) > $TMP
            mv $TMP requirements.yml
        fi

  _populate-meta:
    vars:
      REFERENCES:
        sh: grep -Ril "\{{.MODULE}}" ./tasks
    cmds:
      - |
        if [ "\{{.REFERENCES}}" ] && [[ ! "\{{.DEPENDENCIES}}" =~ "\{{.ROLE}}" ]]; then

          yq eval -i -P '.dependencies = .dependencies + \{{.VAL}}' meta/main.yml
          TMP=$(mktemp)
          (echo "---" && cat meta/main.yml) > $TMP
          mv $TMP meta/main.yml
        fi

  symlink:
    desc: Symlink the current role to ~/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\{{.GALAXY_ROLE_NAME}}
    summary: |
      $ Symlink this role to ~/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\{{.GALAXY_ROLE_NAME}}

      Roles are sometimes referred to by their folder name (which ideally is also the role_name in
      the meta/main.yml file) and they are sometimes referred to by their Ansible Galaxy name which
      has the namespace prepended (e.g. \{{GALAXY_NAMESPACE}}.role_name). In order to make sure Ansible
      can find the role in both cases, a symlink in ~/.ansible/roles that points to the folder needs
      to be created.
    cmds:
      - mkdir -p "$HOME/.ansible/roles"
      - rm -f "$HOME/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\{{.GALAXY_ROLE_NAME}}"
      - ln -s "$PWD" "~/.ansible/roles/\{{.GALAXY_NAMESPACE}}.\{{.GALAXY_ROLE_NAME}}"
{{/if}}
