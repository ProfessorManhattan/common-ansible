---
version: '3'

tasks:
{{#if hbs.ansible}}

  local:
    deps:
      - :ansible:symlink
      - :common:python-requirements
    desc: Run the Ansible play on the local machine
    summary: |
      $ Run the Ansible play on the local machine

      This task will use the inventory stored in `tests/inventory`, the playbook
      file stored in `tests/test.yml`, and the Ansible configuration file stored in
      `tests/ansible.cfg` to run the play. At the beginning of the play, you will
      be prompted for the sudo password.
    cmds:
      - cp tests/inventory inventory
      - if [ ! -f main.yml.bak ]; then mv main.yml main.yml.bak; fi
      - cp tests/test.yml main.yml
      - if [ ! -f ansible.cfg.bak ]; then mv ansible.cfg ansible.cfg.bak; fi
      - cp tests/ansible.cfg ansible.cfg
      - ansible-playbook --ask-sudo-pass main.yml
      - mv main.yml.bak main.yml
      - mv ansible.cfg.bak ansible.cfg
    preconditions:
      - sh: typeof ansible &> /dev/null
        msg: "Ansible is not available. Install the dependencies by running `task common:requirements`."

  molecule-desktop:
    deps:
      - :common:python-requirements
      - :software:virtualbox
    desc: Provisions a desktop VirtualBox VM and then runs a Molecule test
    summary: |
      $ Provision a desktop VirtualBox VM and then run a Molecule test

      This task opens a VM with an operating system of your choosing and then tests
      the project's play against it. It then leaves the VM open for inspection.

      Example with interactive prompt for VM type:
      > task test:molecule

      Example usage bypassing prompt:
      > task test:molecule -- archlinux

      Available scenarios:
        * archlinux    * fedora    * windows
        * centos       * macos
        * debian       * ubuntu
    cmds:
      - export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      - if [ ! -z "\{{.CLI_ARGS}}" ]; then molecule converge -s \{{.CLI_ARGS}}-desktop; fi
      - task: molecule-desktop-prompt

  molecule-desktop-prompt:
    deps:
      - :software:node
    env:
      OPERATING_SYSTEM:
        sh: node .common/scripts/prompts/molecule-desktop.js
    cmds:
        - if [ ! -z "$OPERATING_SYSTEM" ]; then molecule converge -s "${OPERATING_SYSTEM}-desktop"; fi
    status:
      - '[[ -z "\{{.CLI_ARGS}}" ]]'

  molecule-docker:
    deps:
      - :common:python-requirements
      - :software:docker
    desc: Performs a full test, including a test for idempotency, on all available Linux systems using Docker
    summary: |
      $ Perform a full test, including an idempotency test, on all available Linux systems using Docker

      This task runs the project's Molecule tests using Docker. It only tests against
      Linux systems. If the role/project contains any steps that use the
      community.general.snap plugin, then only the operating systems that support that
      plugin with Docker are tested.

      Example usage:
      > task test:molecule-docker
    vars:
      SNAP_REFS:
        sh: grep -Ril \"community.general.snap:\" ./tasks
    cmds:
      - if [ "\{{.SNAP_REFS}}" ]; then molecule test -s docker-snap; else molecule test -s docker; fi

  molecule-e2e:
    deps:
      - :common:python-requirements
      - :software:virtualbox
    desc: Runs a full E2E Molecule test for all supported operating systems
    summary: |
      $ Run a full E2E Molecule test for all supported operating systems

      This task uses VirtualBox to run tests for all of our supported operating
      systems in parallel. It is very RAM intensive so, if you want to run this,
      your computer should have at least 32GB of RAM.

      Run the full test:
      > task test:molecule-e2e

      Generate the compatibility matrix used in the README.md:
      > task test:molecule-e2e -- matrix
    env:
      # yamllint disable-line rule:truthy
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: YES
    vars:
      MOLECULE_DATE:
        sh: date '+%Y-%m-%d'
    cmds:
      - |
        if [ "\{{.CLI_ARGS}}" ]; then
          if [ "\{{.CLI_ARGS}}" == 'matrix']; then
            mkdir -p .molecule-results
            PY_COLORS=0 molecule test > .molecule-results/\{{.MOLECULE_DATE}}-default.txt
          fi
        else
          molecule test
        fi
{{/if}}
{{#if hbs.playbook}}

    vagrant:
      deps:
        - :common:python-requirements
        - :software:vagrant
      desc: Runs the playbook using Vagrant
      summary: |
        $ Run the playbook using Vagrant

        Using Vagrant, you can pick and choose which operating system and
        virtualization provider you want to use to test the playbook.

        Possible virtualization providers:
          * hyperv       * virtualbox
          * libvirt      * vmware_fusion
          * parallels    * vmware_workstation

        Possible operating systems:
          * archlinux    * fedora    * windows
          * centos       * macos
          * debian       * ubuntu

        Example opening interactive prompt:
        > task test:vagrant

        Example bypassing interactive prompt:
        > task test:vagrant -- --provider=vmware_workstation windows
      cmds:
        - if [ ! -z "\{{.CLI_ARGS}}" ]; then vagrant up \{{.CLI_ARGS}}; fi
        - task: vagrant-prompt

    vagrant-prompt:
      deps:
        - :software:node
      env:
        VAGRANT_COMMAND:
          sh: node .common/scripts/prompts/vagrant-up.js
      cmds:
        - if [ ! -z "$VAGRANT_COMMAND" ]; then vagrant up "$VAGRANT_COMMAND"; fi
      status:
        - '[[ -z "\{{.CLI_ARGS}}" ]]'
{{/if}}
{{#if hbs.packer}}

    packer:
      deps:
        - :software:packer
      desc: Validate the Packer templates ending with `template.json`
      summary: |
        $ Validate Packer templates

        This task will loop through all the Packer templates ending with `template.json`
        in the root of this project and report any errors that the templates might have.

        For more information on `packer validate`, see: https://www.packer.io/docs/commands/validate
      cmds:
        - |
          for TEMPLATE in *template.json; do
            packer validate "$TEMPLATE"
          done
{{/if}}
{{#if hbs.vagrant}}

    vagrant:
      deps:
        - :software:vagrant
      desc: Validate the Vagrantfile
      summary: |
        $ Validate the Vagrantfile

        This task is an alias for `vagrant validate`. Vagrant's `validate` command
        will ensure the Vagrantfile in the root of this repository has no errors and
        is using valid syntax.

        For more information on `vagrant validate`, see: https://www.vagrantup.com/docs/cli/validate
      cmds:
        - vagrant validate
{{/if}}
