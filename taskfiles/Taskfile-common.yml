version: '3'

tasks:
  default:
    cmds:
      - echo "Hey"
  bootstrap:
    desc: Scaffold/update the project by copying the appropriate files from the .common submodule
    dir: .common
    cmds: |
        for FOLDER in files-*/; do
          FOLDER_SUBTYPE=$(echo $FOLDER | sed 's/files-\(.*\)\//\1/')
          if [ "$FOLDER_SUBTYPE" == "$REPOSITORY_SUBTYPE" ]; then
            cp -rT files-$FOLDER_SUBTYPE files
            hbs
          fi
        done
  fix-formatting:
    desc: Automatically format most files using Prettier
    cmds:
      - npm run fix:prettier

  fix-python:
    desc: Automatically format Python files using Black
    cmds:
      - black --exclude '\.cache/|.*\.cache/|\.common/|.*\.common/|.git/|.*\.git/|node_modules/|.*node_modules/|roles/' .

  fix-scripts:
    desc: (Experimental) Automatically apply fixes to .sh files using Shellcheck
    cmds:
      - npm run fix:shellcheck

  lint:
    deps: [lint-ansible, lint-dockerfiles, lint-python, lint-yaml]

  lint-ansible:
    deps: [symlink-ansible-roles]
    desc: Lint Ansible projects using Ansible Lint
    cmds:
      - ansible-lint
    sources:
      - defaults/**/*
      - environments/**/*
      - group_vars/**/*
      - host_vars/**/*
      - inventories/**/*
      - meta/**/*
      - molecule/**/*
      - playbooks/**/*
      - tasks/**/*
      - tests/**/*
      - vars/**/*
      - ./*.yml
    method: checksum

  lint-dockerfiles:
    desc: Lint Dockerfiles using Hadolint (requires Docker)
    cmds:
      - find . -type d \\( -name .cache -o -name .common -o -name .git -o -name .modules  -o -name node_modules -o -name .husky -o -name .task -o -name test \\) -prune -o -type f \\( -name Dockerfile -o -name Dockerfile.j2 \\) -print0 | xargs -0 -r -n1 docker run -v ${PWD}:/work -w /work megabytelabs/hadolint:slim
    sources:
      - Dockerfile
      - Dockerfile.j2
      - ./**/Dockerfile
      - ./**/Dockerfile.j2
    method: checksum

  lint-python:
    desc: Lint Python files using Flake8
    cmds:
      - flake8 .

  lint-yaml:
    desc: Lint .yml files using YAML Lint
    cmds:
      - yamllint .
    sources:
      - defaults/**/*
      - environments/**/*
      - group_vars/**/*
      - host_vars/**/*
      - inventories/**/*
      - meta/**/*
      - molecule/**/*
      - playbooks/**/*
      - tasks/**/*
      - tests/**/*
      - vars/**/*
      - ./*.yml
    method: checksum

  local-test:
    desc: Run the Ansible play on the local machine
    cmds:
      - cp tests/inventory inventory
      - if [ ! -f main.yml.bak ]; then mv main.yml main.yml.bak; fi
      - cp tests/test.yml main.yml
      - if [ ! -f ansible.cfg.bak ]; then mv ansible.cfg ansible.cfg.bak; fi
      - cp tests/ansible.cfg ansible.cfg
      - ansible-playbook --ask-sudo-pass main.yml

  markdown-link-check:
    desc: Scan markdown files for broken links
    cmds:
      - npm run misc:markdown-links

  molecule-desktop:
    desc: Provisions a desktop VirtualBox VM and then runs a Molecule test
    summary: |
      This task opens a VM with an operating system of your choosing and then tests
      the project's play against it. It then leaves the VM open for inspection.

      Example usage:
      task molecule -- archlinux

      Available scenarios:
      archlinux, centos, debian, fedora, macos, ubuntu, windows
    cmds:
      - export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      - molecule converge -s {{.CLI_ARGS}}-desktop

  molecule-docker:
    desc: Performs a full test, including a test for idempotency, on all available Linux systems using Docker
    summary: |
      This task runs the project's Molecule tests using Docker. It only tests against
      Linux systems. If the role/project contains any steps that use the
      community.general.snap plugin, then only the operating systems that support that
      plugin with Docker are tested.

      Example usage:
      task molecule-docker
    vars:
      SNAP_REFS:
        sh: grep -Ril \"community.general.snap:\" ./tasks
    cmds:
      - if [ "$SNAP_REFS" ]; then molecule test -s docker-snap; else molecule test -s docker; fi

  molecule-e2e:
    desc: Runs a full E2E Molecule test for all supported operating systems
    summary: |
      This task uses VirtualBox to run tests for all of our supported operating
      systems in parallel. It is very RAM intensive so, if you want to run this,
      your computer should have at least 32GB of RAM.

      Run the full test:
      task molecule-e2e

      Generate the compatibility matrix in the README.md:
      task molecule-e2e -- matrix
    cmds:
      - export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      - |
        if [ "{{.CLI_ARGS}}" ]; then
          if [ "{{.CLI_ARGS}}" == 'matrix']; then
            PYCOLORS=0 molecule test > molecule-test-output.txt
          fi
        else
          molecule test
        fi

  prepare-release:
    desc: Ensure the project has upstream changes, lint, and then update the version
    cmds:
      - task: update
      - task: lint
      - task: version

  shell:
    desc: Start a terminal session using Docker with any Linux operating system
    summary: |
      Start a Docker terminal session

      Use Docker to run commands on nearly any operating system. The operating
      systems are all stock distros with systemd added.

      Example usage:
      task shell -- ubuntu-21.04

      Available operating systems:
      archlinux, centos-7, centos-8, debian-9, debian-10, fedora-33, fedora-34,
      ubuntu-18.04, ubuntu-20.04, ubuntu-21.04
    vars:
      WORKDIR:
        sh: basename $PWD
    cmds:
      - docker run --cap-drop=ALL -it -v ${PWD}:/{{WORKDIR}} -w /{{WORKDIR}} --rm megabytelabs/ansible-molecule-{{.CLI_ARGS}}:latest /bin/bash

  symlink-ansible-role:
    desc: Symlink all the roles in the roles folder to ~/.ansible/roles
    vars:
      ROLE_FOLDER:
        sh: basename $PWD
    cmds:
      - export ANSIBLE_GALAXY_USERNAME_PREFIX=professormanhattan.
      - rm -f "$HOME/.ansible/roles/${ANSIBLE_GALAXY_USERNAME_PREFIX}.${ROLE_FOLDER}"
      - mkdir -p "$HOME/.ansible/roles"
      - ln -s "$PWD" "~/.ansible/roles/${ANSIBLE_GALAXY_USERNAME_PREFIX}.${ROLE_FOLDER}"
    sources:
      - roles/*/*/
    method: timestamp

  update:
    desc: Ensure the project is completely up-to-date and ready for development
    cmds:
      - cp ./.common/.start.sh .start.sh

  version:
    desc: Increment the version (use the prepare-release task instead)
    cmds:
      - npm run version
