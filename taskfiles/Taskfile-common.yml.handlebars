---
version: '3'

tasks:
  clean:
    deps:
      - :software:rsync
    desc: Removes optional folders that are cached during various tasks
    summary: |
      $ Clean the project and remove all optional caches

      This task will remove all the unnecessary files that are downloaded, generated, and
      cached during various build steps. This task is used by the `task common:reset` task
      which will re-generate the project from scratch. Ideally, this task and the reset task
      should never be necessary. The `common:update` task should be used instead.
    vars:
      RANDOM_STRING:
        sh: openssl rand -hex 14
    cmds:
      - info: "Cleaning up the project by removing caches etc."
      - rm .variables.json 2> /dev/null
      - mv .autodoc /tmp/\{{.RANDOM_STRING}}-autodoc 2> /dev/null
      - mv .task /tmp/\{{.RANDOM_STRING}}-task 2> /dev/null
      - mv .venv /tmp/\{{.RANDOM_STRING}}-venv 2> /dev/null
      - mv node_modules /tmp/\{{.RANDOM_STRING}}-node_modules 2> /dev/null
      - mkdir -p /tmp/\{{.RANDOM_STRING}}-empty
      - |
        for TMP_FILE in autodoc task venv node_modules; do
          if [ -f "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" ] || [ -d "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" ]; then
            rsync -a --delete /tmp/\{{.RANDOM_STRING}}-empty "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" &
          fi
        done

  commit:
    deps:
      - :npm:commitizen
      - :npm:commitlint
      - nodejs-dependencies
      - python-requirements
    desc: Lint staged files, report spelling errors, and open a _required_ commit dialoge
    summary: |
      $ Commit code

      This task will perform linting and auto-fixing on the files that have been staged in
      git (i.e. the files that were added with `git add --all`). It will then report possible
      spelling errors that you may choose to fix. Then, it opens a _required_ interactive commit
      questionnaire that will help you make better commits that are compatible with software
      that generates the CHANGELOG.md.

      It is very important that you use this task to commit rather than the conventional approach
      using `git commit -m`. However, if you really need to, you can add the flag `--no-verify`
      to your regular `git commit -m` command to bypass the pre-commit hook.
    cmds:
      - . ./.husky/pre-commit
      - true info "Initiating the commit dialog"
      - exec < /dev/tty && git cz --hook || true

{{#if hbs.ansible}}
  galaxy-requirements:
    cmds:
      - . .venv/bin/activate
      - cmd: |
          if [ "${container:=}" != 'docker' ]; then
            if type ansible-galaxy &> /dev/null; then
              ansible-galaxy install -r requirements.yml --ignore-errors
              if [[ $? == 0 ]]; then
                true success "Successfully installed Ansible Galaxy requirements"
              else
                true error "Failed to install Ansible Galaxy requirements"
              fi
            else
              true warn "Ansible Galaxy requirements were not installed because 'ansible-galaxy' is not available in the PATH"
            fi
          fi
        ignore_error: true
    sources:
      - requirements.yml
    preconditions:
      - sh: "test -f requirements.yml"
        msg: "The requirements.yml file is missing! It should be present even if it is empty (which should almost never be the case)."

{{/if}}
  husky:
    deps:
      - :npm:commitizen
      - :npm:commitlint
      - :npm:husky
      - nodejs-dependencies
    cmds:
      - |
        if [ -d .git ]; then
          husky install
        else
          true error "Cannot run 'husky install' because there is no '.git/' folder"
        fi
      - task: husky-executable
        vars:
          FILE: .husky/commit-msg
      - task: husky-executable
        vars:
          FILE: .husky/pre-commit
      - task:
        vars:
          FILE: .husky/prepare-commit-msg
    status:
      - '[ "${container:=}" == "docker" ]'

  husky-executable:
    cmds:
      - |
        if [ -f "\{{.FILE}}" ]; then
          chmod 755 "\{{.FILE}}"
        else
          if [ -f ".common/files-\{{.REPOSITORY_SUBTYPE}}/\{{.FILE}}" ]; then
            cp ".common/files-\{{.REPOSITORY_SUBTYPE}}/\{{.FILE}}" "\{{.FILE}}"
            chmod 755 "\{{.FILE}}"
          else
            true error "The '\{{.FILE}}' is missing from the '.common/files-\{{.REPOSITORY_SUBTYPE}}/' folder"
          fi
        fi
    sources:
      - ".common/files-\{{.REPOSITORY_SUBTYPE}}/\{{.FILE}}"
      - "\{{.FILE}}"

  nodejs-dependencies:
    deps:
      - :software:node
    cmds:
      - |
        if [ "${container:=}" != 'docker' ]; then
          true info "Running 'npm install'"
          npm install
          npm audit fix --force || true
          true success "Successfully ran 'npm install'"
        fi
    sources:
      - package.json
      - package-lock.json
    status:
      - 'test -d node_modules || [ "${container:=}" == "docker" ]'
    preconditions:
      - sh: "test -f package.json"
        msg: "The package.json file appears to be missing!"

  nodejs-global-dependencies:
    deps:
      - :npm:commitizen
      - :npm:commitlint
      - :npm:cspell
      - :npm:hbs
      - :npm:lint-staged
      - :npm:markdown-link-check
      - :npm:prettier
      - :npm:prettier-package-json
      - :npm:readme
      - :npm:remark
      - :npm:shellcheck
{{#if hbs.dockerfile}}
      - :npm:snyk
{{/if}}
      - :npm:standard-version
    status:
      - '[[ "${container:=}" == "docker" ]]'

  precommit:
    deps:
      - :fix:json
      - :fix:misc
      - :lint:private-keys

  prepare-release:
    deps:
      - :npm:standard-version
    desc: Ensure the project has upstream changes, lint, and then update the version
    summary: |
      $ Prepare a new release

      This task performs the following tasks in order:
      (1) Ensures the project is up-to-date with the latest upstream changes
      (2) Lints the project with all available linters
      (3) Updates the version of the project in the `package.json` file
      (4) Add the appropriate details to the CHANGELOG.md file
    cmds:
      - task: update
      - task: :lint:all
{{#if hbs.packer}}
      - task: :test:packer
{{/if}}
{{#if hbs.vagrant}}
      - task: :test:vagrant
{{/if}}
      - standard-version --no-verify

  python-requirements-pip:
    cmds:
      - . .venv/bin/activate
      - pip3 install -r requirements.txt
    sources:
      - requirements.txt
    preconditions:
      - sh: "test -f requirements.txt"
        msg: "The requirements.txt file is missing!"
      - sh: "test -f .venv/bin/activate"
        msg: "The Python virtualenv '.venv/bin/activate' file is missing!"

  python-requirements-venv-activate:
    cmds:
      - . .venv/bin/activate
    preconditions:
      - sh: test -f .venv/bin/activate
        msg: "`.venv/bin/activate` is missing!"

  python-requirements-venv:
    deps:
      - :python:virtualenv
      - :software:rsync
    vars:
      RANDOM_STRING:
        sh: openssl rand -hex 14
    cmds:
      - |
        if [ -d .venv ] && [ ! -f .venv/bin/activate ]; then
          mv .venv /tmp/\{{.RANDOM_STRING}}-venv2 2> /dev/null
          mkdir -p /tmp/\{{.RANDOM_STRING}}-empty
          rsync -a --delete /tmp/\{{.RANDOM_STRING}}-empty /tmp/\{{.RANDOM_STRING}}-venv2 &
        fi
      - virtualenv .venv
    status:
      - test -f .venv/bin/activate

  python-requirements:
    deps:
      - :software:python
    cmds:
      - task: python-requirements-venv
      # - task: python-requirements-venv-activate
      - task: python-requirements-pip
{{#if hbs.ansible}}
      - task: galaxy-requirements
{{/if}}
    status:
      - '[[ "${container:=}" == "docker" ]]'

  requirements:
    deps:
      - nodejs-dependencies
      - nodejs-global-dependencies
      - python-requirements
    desc: Ensure all the dependencies are installed (Node.js, Python, etc.)
    summary: |
      $ Ensure dependencies are installed

      This task ensures that packages in various languages (Node.js, Python, etc.) are installed.
      At the very minimum, it will install the Node.js requirements by running `npm install` and
      then install the Python requirements by running `pip3 install -r requirements` after
      initiating a `virtualenv`. In some types of projects, additional types of requirements are
      installed (e.g. Ansible projects also install Ansible Galaxy requirements).

  reset-force:
    deps:
      - software:git
    desc: "Aggressively reset the project (WARNING: This will wipe uncommitted work)"
    summary: |
      $ Aggressively reset the project

      If using `task common:reset` does not fix your issues, you can run this task
      to completely wipe out uncommitted work, clear all the caches, and sync
      with the master branch of both this project and its upstream repositories.
    cmds:
      - git reset --hard HEAD
      - git clean -fxd :/
      - git checkout master
      - git pull origin master --no-rebase
      - bash .start.sh

  reset:
    desc: Resets the project by removing all caches and updating the project
    summary: |
      $ Reset the project and then update it

      This task is intended to be used when the `common:update` task is having trouble
      or when breaking changes are made to the build tools. Use this task if you are
      having trouble with other tasks that are dependent on stale caches. Unlike
      `task common:hard-reset`, this will not remove uncommitted work (assuming your
      work does not reside in folders ignored by the `.gitignore` file).
    cmds:
      - task: clean
      - task: update

  shell-prompt:
    deps:
      - :software:node
    env:
      OS_CHOICE:
        sh: node .common/scripts/prompts/shell.js
    cmds:
      - |
        if [ -z "\{{.CLI_ARGS}}" ] && [ ! -z "$OS_CHOICE" ]; then
          docker run --cap-drop=ALL -it -v "$PWD:/\{{.WORKDIR}}" -w /\{{.WORKDIR}} --rm "megabytelabs/ansible-molecule-${OS_CHOICE}:latest" /bin/bash
        fi
    preconditions:
      - sh: "type node &> /dev/null"
        msg: "Node.js is not installed! Install it by running `task software:node`."
    status:
      - '[[ ! -z "\{{.CLI_ARGS}}" ]]'

  shell:
    deps:
      - :software:docker
    desc: Start a terminal session using Docker with any Linux operating system
    summary: |
      $ Start a Docker terminal session

      Use Docker to run commands on nearly any operating system. The operating
      systems are all stock distros with systemd added.

      Example opening an interactive prompt:
      > task shell

      Example of directly shelling into a container:
      > task shell -- ubuntu-21.04

      Available operating systems:
        * archlinux   * debian-9     * fedora-34      * ubuntu-21.04
        * centos-7    * debian-10    * ubuntu-18.04
        * centos-8    * fedora-33    * ubuntu-20.04
    vars:
      WORKDIR:
        sh: basename $PWD
    cmds:
      - |
        if [ ! -z "\{{.CLI_ARGS}}" ]; then
          docker run --cap-drop=ALL -it -v "$PWD:/\{{.WORKDIR}}" -w /\{{.WORKDIR}} --rm megabytelabs/ansible-molecule-\{{.CLI_ARGS}}:latest /bin/bash
        fi
      - task: shell-prompt
    preconditions:
      - sh: "type docker &> /dev/null"
        msg: "Docker is not installed! Install it by running `task software:docker`."

  update-all:
    deps:
{{#if hbs.packer}}
      - :packer:populate-descriptions
{{/if}}
      - update-contributing
      - update-files
      - update-readme

  update-common:
    deps:
      - :software:git
    cmds:
      - cd .common && git reset --hard HEAD && git pull origin master --no-rebase || true && cd ..
    preconditions:
      - sh: "type git &> /dev/null"
        msg: "git is not installed! You can install it by running `task software:git`."

  update-contributing:
    deps:
      - :npm:prettier
      - :npm:readme
    vars:
      CONTRIB_TEMPLATE: .common/docs/blueprint-contributing.md
    cmds:
      - true log "Generating CONTRIBUTING.md"
      - readme generate --config .variables.json --input "\{{.CONTRIB_TEMPLATE}}" --output CONTRIBUTING.md
      - task: update-markdown-scrub
        vars:
          SCRUB_FILE: CONTRIBUTING.md
      - prettier --write CONTRIBUTING.md
      - true success "Generated CONTRIBUTING.md"
    sources:
      - .variables.json
    preconditions:
      - sh: "test -f .common/docs/blueprint-contributing.md"
        msg: "The CONTRIBUTING.md template file is not present at `.common/docs/blueprint-contributing.md`"
      - sh: "test -f .variables.json"
        msg: "The .variables.json file is not present. Generate it by running `task common:update`."
      - sh: type readme &> /dev/null
        msg: "`@appnest/readme` is not installed globally. Install all the requirements by running `task common:requirements`."

  update-files-handlebars:
    deps:
      - :npm:hbs
    env:
      TMP_BASENAME:
        sh: mktemp
      TMP_DIRNAME:
        sh: mktemp
    cmds:
      - |
        find ./.common/files-\{{.REPOSITORY_SUBTYPE}} -type f -name "*.handlebars" | while read FILE; do
          hbs --data .variables.json "$FILE" --stdout > "${FILE%.*}" &
        done
        wait
    sources:
      - .common/**/*.handlebars
      - .variables.json
    preconditions:
      - sh: "type hbs &> /dev/null"
        msg: "`hbs-cli` is not installed globally. Install all the requirements by running `task common:requirements`."

  update-files:
    deps:
      - :npm:prettier-package-json
      - :software:git
      - :software:jq
      - :software:rsync
    env:
{{#if hbs.ansible_molecule}}
      FIRSTLINE:
        sh: head -n 1 Dockerfile
{{/if}}
      PKG_BLUEPRINT:
        sh: jq -r '.blueprint' package.json | sed 's/^null$/{}/'
      PKG_DEPS:
        sh: jq -r '.dependencies' package.json | sed 's/^null$/{}/'
      PKG_DEV_DEPS:
        sh: jq -r '.devDependencies' package.json | sed 's/^null$/{}/'
      PKG_SCRIPTS:
        sh: jq -r '.scripts' package.json | sed 's/^null$/{}/'
      PKG_VERSION:
        sh: jq -r '.version' package.json
      TMP:
        sh: mktemp
    cmds:
      - task: update-files-handlebars
      - find .common/files-\{{.REPOSITORY_SUBTYPE}} -type f -name "*.handlebars" -delete
{{#if hbs.ansible_molecule}}
      - |
        if [[ "$FIRSTLINE" == *"debian"* ]] || [[ "$FIRSTLINE" == *"ubuntu"* ]]; then
          cp .common/initctl initctl
        fi
{{/if}}
      - rsync -aPq ".common/files-\{{.REPOSITORY_SUBTYPE}}/" ./
      - task: husky
      - task: update-sort
      # The following command merges upstream package.json dependencies and devDependencies and overwrites them with the upstream versions.
      # It allows the package.json in each project to include whatever dependencies it needs while at the same time it allows all the
      # common dependencies to be updated at the same time. It also ensures the version is persistent. It is entirely possible that this
      # might cause issues if a project relies on an outdated dependency or if the upstream dependencies are out of date.
      - jq --arg blueprint "$PKG_BLUEPRINT" --arg deps "$PKG_DEPS" --arg devDeps "$PKG_DEV_DEPS" --arg scripts "$PKG_SCRIPTS" --arg version "$PKG_VERSION"
        '.dependencies = (($deps | fromjson) * .dependencies) | .devDependencies = (($devDeps | fromjson) * .devDependencies)
        | .scripts = (($scripts | fromjson) * .scripts) | .blueprint = ($blueprint | fromjson) | .version = $version' package.json > "$TMP"
      - mv "$TMP" package.json
      - prettier-package-json --write
      - cd .common && git reset --hard HEAD && git clean -fd && cd ..
    sources:
      - package.json
      - .variables.json
    preconditions:
      - sh: "type rsync &> /dev/null"
        msg: "`rsync` is not installed!"
      - sh: "type prettier-package-json &> /dev/null"
        msg: "`prettier-package-json` is not installed globally. Install all the requirements by running `task common:requirements`."

  update-markdown-scrub:
    vars:
      DIVIDER_SRC: <a href="\1" style="width:100%"><img style="width:100%" alt="-----------------------------------------------------"
        src="https://gitlab.com/megabyte-labs/assets/-/raw/master/png/aqua-divider.png" /></a>
      REGEX: .*https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/.*.png)][(]\(.*\)[)].*$
    cmds:
      - |
        if [[ '\{{OS}}' == 'darwin' ]]; then
          sed -i .bak 's^\{{.REGEX}}^\{{.DIVIDER_SRC}}^g' \{{.SCRUB_FILE}} && rm \{{.SCRUB_FILE}}.bak
        else
          sed -i 's^\{{.REGEX}}^\{{.DIVIDER_SRC}}^g' \{{.SCRUB_FILE}}
        fi

  update-modules:
    deps:
      - :software:git
    desc: Ensure all submodules in the `.modules/` folder are updated
    summary: |
      $ Ensure all submodules in `.modules/` are updated

      Some of our projects include submodules. These submodules are generally
      stored in the `.modules/` folder in the root of the project. Some projects
      might symlink files to one of the submodules stored in the `.modules/` folder.
      If you are ok with the risk, you can use this task to update all the submodules
      to the latest on the remote's master branch.
    cmds:
      - |
        if ls .modules/*/ > /dev/null 2>&1; then
          for SUBMODULE_PATH in .modules/*/; do
            cd $SUBMODULE_PATH
            DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
            git reset --hard HEAD
            git checkout "$DEFAULT_BRANCH"
            git pull origin "$DEFAULT_BRANCH" --ff-only || true
          done
        fi
    status:
      - '! ls .modules/*/ > /dev/null 2>&1'

  update-project:
    cmds:
      - git pull origin master --no-rebase || true

  update-readme:
    deps:
{{#if hbs.role}}
      - :ansible:mod-ansible-autodoc
{{/if}}
      - :npm:prettier
      - :npm:readme
    vars:
      README_TEMPLATE: blueprint-readme-\{{.REPOSITORY_SUBTYPE}}.md
    cmds:
      - true info "Generating README.md"
      - readme generate --config .variables.json --input ".common/docs/\{{.README_TEMPLATE}}"
      - task: update-markdown-scrub
        vars:
          SCRUB_FILE: README.md
{{#if hbs.packer}}
      - task: :packer:update-readme
{{/if}}
      - prettier --write README.md
      - true success "Generated README.md"
    sources:
      - .autodoc/*
      - .variables.json
    preconditions:
      - sh: "test -f .common/docs/\{{.README_TEMPLATE}}"
        msg: "The README.md template file is not present at `.common/docs/\{{.README_TEMPLATE}}`."
      - sh: "test -f .variables.json"
        msg: "The `.variables.json` file is not present. Generate it by running `task common:update`."
      - sh: type readme &> /dev/null
        msg: "`@appnest/readme` is not installed globally. Install all the requirements by running `task common:requirements`."
      - sh: type prettier &> /dev/null
        msg: "`prettier` is not installed globally. Install all the requirements by running `task common:requirements`."

  update-repositories:
    cmds:
      - task: update-common
      - task: update-modules
      - task: update-project

  update-sort:
    cmds:
      - if [ -f paths.txt ]; then sort paths.txt -o paths.txt; fi
      - if [ -f requirements.txt ]; then sort requirements.txt -o requirements.txt; fi
    sources:
      - paths.txt
      - requirements.txt

  update-start-sh:
    cmds:
      - cp .common/.start.sh .start.sh
    sources:
      - .common/start.sh

  update-start:
    deps:
      - requirements
      - update-start-sh
      - update-taskfile
      - update-variables

  update-taskfile:
    cmds:
      - cp .common/files-\{{.REPOSITORY_SUBTYPE}}/Taskfile.yml Taskfile.yml
    sources:
      - .common/files-\{{.REPOSITORY_SUBTYPE}}/Taskfile.yml

  update-variables:
    deps:
      - :software:jq
    env:
      BLUEPRINT_DATA:
        sh: jq -r '.blueprint' package.json
      TMP:
        sh: mktemp
    vars:
      COMMON_JSON: ".common/common.\{{.REPOSITORY_SUBTYPE}}.json"
    cmds:
      - jq -S --arg blueprint "$BLUEPRINT_DATA" '. = . * ($blueprint | fromjson)' ".common/variables.\{{.REPOSITORY_SUBTYPE}}.json" > "$TMP"
      - mv "$TMP" .variables.json
{{#if hbs.packer}}
      - task: :packer:update-variables
{{/if}}
{{#if hbs.role}}
      - task: :ansible:update-variables
{{/if}}
    sources:
      - ".common/variables.\{{.REPOSITORY_SUBTYPE}}.json"
      - package.json
    preconditions:
      - sh: "type jq &> /dev/null"
        msg: "jq is not installed! You can install it by running `task software:jq`."
      - sh: "type yq &> /dev/null"
        msg: "yq is not installed! You can install it by running `task software:yq`."

  update:
    deps:
{{#if hbs.packer}}
      - :packer:latestos
{{/if}}
{{#if hbs.role}}
      - :ansible:populate-dependencies
      - :ansible:update-galaxy-id
{{/if}}
      - update-repositories
    desc: Refresh the project with the latest upstream code and ensure blueprint data has propagated
    cmds:
      - task: update-start
      - task: update-all
{{#if hbs.docker}}
      - task: :docker:update-labels
{{/if}}
      - true success "Successfully updated the project with the latest upstream changes"
