---
version: '3'

tasks:
{{#if hbs.docker}}
  all:
    cmds:
      - task: normal
      - task: slim

  normal:
    deps:
      - :software:docker
      - :software:jq
    desc: Build a Docker container from the Dockerfile
    summary: |
      $ Build a Docker container from the Dockerfile

      This task builds a normal Docker container. It expects the Dockerfile to be
      named `Dockerfile` and for it to be in the root of the repository.

      For more information on building Docker containers, see: https://docs.docker.com/engine/reference/commandline/build/
    vars:
      BUILD_DATE:
        sh: git show -s --format=%cI
      IMAGE_NAME: {{profile.dockerhub}}/{{slug}}
      REVISION:
        sh: git rev-parse HEAD
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - bash .common/log log "Building regular image named `\{{.IMAGE_NAME}}`"
      - docker build --build-arg BUILD_DATE="\{{.BUILD_DATE}}" --build-arg REVISION="\{{.REVISION}}" --build-arg VERSION="\{{.VERSION}}"
          --tag \{{.IMAGE_NAME}}:latest --tag \{{.IMAGE_NAME}}:\{{.VERSION}} .
    sources:
      - Dockerfile
      - package.json

  slim:
    deps:
      - :common:npm-prettier
      - :software:docker
      - :software:dockerslim
    desc: Build a slim version of the Docker image
    summary: |
      $ Build a compressed and secure container from the `regular` Docker image

      This task takes the Docker container generated by running `task build:normal` and
      compresses it using DockerSlim. Compressing it actually makes the container more
      secure too because there is a smaller attack surface with unnecessary tools and services
      removed.

      For more information on DockerSlim, see: https://github.com/docker-slim/docker-slim
    vars:
      IMAGE_NAME: {{profile.dockerhub}}/{{slug}}
      SLIM_COMMAND:
        sh: jq -r '.blueprint.dockerslim_command' package.json
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - |
        if ! docker image inspect megabytelabs/updater:latest > /dev/null 2>&1; then
          bash .common/log log "Building regular image first"
          task build:normal
        fi
      - bash .common/log log "Building slim image named `\{{.IMAGE_NAME}}`"
      - docker-slim build --tag \{{.IMAGE_NAME}}:slim \{{.SLIM_COMMAND}} \{{.IMAGE_NAME}}:latest
      - prettier --write slim.report.json
      - task: slim-sizes
    sources:
      - Dockerfile
      - package.json
    preconditions:
      - sh: docker image inspect megabytelabs/updater:latest > /dev/null 2>&1
        msg: "You need to build a normal Docker container before converting it into a slim build. Try running `task build:normal` before this task."

  _slim:
    deps: [slim-prettier, slim-sizes]

  slim-prettier:
    cmds:
      - prettier --write slim.report.json
    sources:
      - slim.report.json

  slim-sizes:
    vars:
      PREVIOUS_SLIM_SIZE:
        sh: jq -r '.blueprint.slim_size' package.json
      REGULAR_SIZE:
        sh: docker manifest inspect -v "\{{.IMAGE_NAME}}:latest" | grep size | awk -F ":" "{sum+=$NF} END {print sum}"
              | awk "{$1=$1/(1024^2); print $1,'MB';}"
      SLIM_SIZE:
        sh: docker manifest inspect -v "\{{.IMAGE_NAME}}:slim" | grep size | awk -F ":" "{sum+=$NF} END {print sum}"
              | awk "{$1=$1/(1024^2); print $1,'MB';}"
    env:
      TMP:
        sh: mktemp
    cmds:
      - bash .common/log info "The slim build was compressed to `\{{.SLIM_SIZE}}` (`\{{.REGULAR_SIZE}}` originally)."
      - jq --arg a "\{{.SLIM_SIZE}}" '.blueprint.slim_size = $a' package.json > "$TMP"
      - mv "$TMP" package.json
      - task: :common:update
    status:
      - '[[ "\{{.PREVIOUS_SLIM_SIZE}}" == "\{{.SLIM_SIZE}}" ]]'

{{/if}}
{{#if hbs.npm}}
  all:
    deps: [main, module]

  clean:
    desc: Remove temporary folders that might conflicts with builds
    vars:
      RANDOM_STRING:
        sh: openssl rand -hex 14
    cmds:
      - mv build /tmp/\{{.RANDOM_STRING}}-build
      - mv test /tmp/\{{.TEST_TMP}}-test
      - mkdir /tmp/\{{.RANDOM_STRING}}-empty
      - |
        for TMP_FILE in build test; do
          if [ -f "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" ] || [ -d "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" ]; then
            (rsync -a --delete /tmp/\{{.RANDOM_STRING}}-empty "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE" && rm -rf "/tmp/\{{.RANDOM_STRING}}-$TMP_FILE") &
          fi
        done

  main:
    desc: Build `main` using `tsconfig.json`
    cmds:
      - tsc -p tsconfig.json

  module:
    desc: Build `module` using `tsconfig.module.json`
    cmds:
      - tsc -p tsconfig.module.json

{{/if}}
